package com.springboot.jpa_demo.datasource1.service.imp;

import com.alibaba.fastjson.JSONObject;
import com.springboot.jpa_demo.datasource1.domain.Book;
import com.springboot.jpa_demo.datasource1.domain.Product;
import com.springboot.jpa_demo.datasource1.repository.BookRepository;
import com.springboot.jpa_demo.datasource1.repository.ConsumerRepository;
import com.springboot.jpa_demo.datasource1.repository.ProductRepositpry;
import com.springboot.jpa_demo.datasource1.service.ProductService;
import com.springboot.jpa_demo.utils.ConstantVar;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class ProductServiceImpl implements ProductService {

    @Autowired
    ProductRepositpry productRepositpry;

    //为了自动向数据库添加测试数据而引入的
    @Autowired
    BookRepository bookRepository;

    //为了自动向数据库添加测试数据而引入的
    @Autowired
    ConsumerRepository consumerRepository;

    @Override
    public JSONObject addUser(Product product) {
        JSONObject res=new JSONObject();
        Product product1 = productRepositpry.save(product);

        res.put("data", product1);
        res.put("code", ConstantVar.SUCCESSFUL_CODE);
        res.put("message",ConstantVar.SUCCESSFUL_MESSAGE);
        return res;
    }

    @Override
    public JSONObject login(int id,String password) {
        JSONObject res=new JSONObject();
        Product product = productRepositpry.findById(id);
        if(product !=null&& product.getPassword().equals(password)){
            res.put("data", product);
            res.put("code", ConstantVar.SUCCESSFUL_CODE);
            res.put("message",ConstantVar.SUCCESSFUL_MESSAGE);

            //在用户登录成功的时候自动生成数据库里面的数据
            int result=generateData();
            if (result==1){
                System.out.println("AutoGenerateData successfully");
            }else{
                System.out.println("AutoGenerateData fail");
            }
        }else{
            res.put("code", ConstantVar.ID_PASS_INCORRECT);
            res.put("message",ConstantVar.ID_PASS_INCORRECT_MSG);
        }

        return res;
    }


    @Override
    public Product findUserById(int userId){
        return productRepositpry.findById(userId);
    }


    //这个方法用来自动生成数据库里面的测试数据
    //在登录成功的时候用
    public int generateData(){
        int phonePrefix=1881095989;
        int idPrefix=100;
        String location="北京市海淀区北京交通大学";
        String introduction="我的性格类型是";
        try {
            for(int i=0; i<5; i++) {
                //addGym
                Book bookInstance = new Book(String.valueOf(i), location + String.valueOf(i), String.valueOf(phonePrefix + i));
                Book bookOK = bookRepository.saveAndFlush(bookInstance);

//                //addTrainer
//                Trainer trainerInstance = new Trainer(String.valueOf(i), String.valueOf(i), String.valueOf(i), introduction, String.valueOf(phonePrefix), gymOK);
//                trainerRepository.saveAndFlush(trainerInstance);

            }

            List<Book> bookList = bookRepository.findAll();

            for(int i=0; i<5; i++) {
                //addUser
                Product productInstance = new Product(String.valueOf(i), "male", String.valueOf(phonePrefix + i), i + 10, String.valueOf(i), bookList);
                productRepositpry.saveAndFlush(productInstance);
            }

        }catch (Exception e){
            e.printStackTrace();
            return 2;
        }
        return 1;
    }
}
